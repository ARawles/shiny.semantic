% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layouts.R
\name{sidebar_panel}
\alias{sidebar_panel}
\alias{main_panel}
\alias{sidebar_layout}
\alias{sidebarPanel}
\alias{mainPanel}
\alias{sidebarLayout}
\title{Creates div containing elements in order or grid container for sidebar panel}
\usage{
sidebar_panel(items)

main_panel(args)

sidebar_layout(
  sidebar_panel,
  main_panel,
  sidebar_width = "25",
  mirrored = FALSE,
  min_height = "auto",
  container_style = "",
  area_styles = list(sidebar_panel = "", main_panel = "")
)

sidebarPanel(..., width = 4)

mainPanel(..., width = 8)

sidebarLayout(
  sidebarPanel,
  mainPanel,
  position = c("left", "right"),
  fluid = TRUE
)
}
\arguments{
\item{sidebar_panel}{Sidebar panel component}

\item{main_panel}{Main panel component}

\item{sidebar_width}{Width of sidebar panel in percents}

\item{mirrored}{If TRUE sidebar is located on the right side,
if FALSE - on the left side (default)}

\item{min_height}{Sidebar layout container keeps the minimum height, if
specified. It should be formatted as a string with css units}

\item{container_style}{CSS declarations for grid container}

\item{area_styles}{List of CSS declarations for each grid area inside container}

\item{...}{Container's children elements}

\item{grid_list}{List to create grid from}
}
\value{
Container with sidebar and main panels
}
\description{
Creates div containing elements in order or grid container for sidebar panel

Creates div containing elements in order or grid container for main panel

Creates grid layout composed of sidebar and main panels
}
\examples{
if (interactive()){
library(shiny)
library(shiny.semantic)
ui <- semanticPage(
  titlePanel("Hello Shiny!"),
  sidebar_layout(
    sidebar_panel(
      shiny.semantic::sliderInput("obs",
                                  "Number of observations:",
                                 min = 0,
                                  max = 1000,
                                  value = 500)
    ),
    main_panel(
      plotOutput("distPlot")
    )
  )
)
server <- function(input, output) {
  output$distPlot <- renderPlot({
    hist(rnorm(input$obs))
  })
}
}
}
