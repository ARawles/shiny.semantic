% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/progress.R
\name{withProgress}
\alias{withProgress}
\alias{with_progress}
\alias{setProgress}
\alias{set_progress}
\alias{incProgress}
\title{Reporting progress (functional API)}
\usage{
withProgress(
  expr,
  min = 0,
  max = 1,
  value = min + (max - min) * 0.1,
  message = NULL,
  session = getDefaultReactiveDomain(),
  env = parent.frame(),
  quoted = FALSE,
  ...
)

with_progress(
  expr,
  min = 0,
  max = 1,
  value = min + (max - min) * 0.1,
  message = NULL,
  session = getDefaultReactiveDomain(),
  env = parent.frame(),
  quoted = FALSE
)

setProgress(
  value = NULL,
  message = NULL,
  session = getDefaultReactiveDomain(),
  ...
)

set_progress(
  value = NULL,
  message = NULL,
  session = getDefaultReactiveDomain()
)

incProgress(
  amount = 0.1,
  message = NULL,
  session = getDefaultReactiveDomain(),
  ...
)
}
\arguments{
\item{expr}{The work to be done. This expression should contain calls to
`setProgress`.}

\item{min}{The value that represents the starting point of the progress bar.
Must be less tham `max`. Default is 0.}

\item{max}{The value that represents the end of the progress bar. Must be
greater than `min`. Default is 1.}

\item{value}{Single-element numeric vector; the value at which to set the
progress bar, relative to `min` and `max`.}

\item{message}{A single-element character vector; the message to be displayed
to the user, or `NULL` to hide the current message (if any).}

\item{session}{The Shiny session object, as provided by `shinyServer` to
the server function. The default is to automatically find the session by
using the current reactive domain.}

\item{env}{The environment in which `expr` should be evaluated.}

\item{quoted}{Whether `expr` is a quoted expression (this is not
common).}

\item{...}{Arguments that may have been used in `shiny::withProgress`}

\item{amount}{For `incProgress`, the amount to increment the status bar.
Default is 0.1.}
}
\description{
Reports progress to the user during long-running operations.
}
\details{
This package exposes two distinct programming APIs for working with progress.
Using `withProgress` with `incProgress` or `setProgress`
provide a simple function-based interface, while the [Progress()]
reference class provides an object-oriented API.

Use `withProgress` to wrap the scope of your work; doing so will cause a
new progress panel to be created, and it will be displayed the first time
`incProgress` or `setProgress` are called. When `withProgress`
exits, the corresponding progress panel will be removed.

The `incProgress` function increments the status bar by a specified
amount, whereas the `setProgress` function sets it to a specific value,
and can also set the text displayed.

Generally, `withProgress`/`incProgress`/`setProgress` should
be sufficient; the exception is if the work to be done is asynchronous (this
is not common) or otherwise cannot be encapsulated by a single scope. In that
case, you can use the `Progress` reference class.
}
\examples{
## Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)

ui <- semanticPage(
  plotOutput("plot")
)

server <- function(input, output) {
  output$plot <- renderPlot({
    withProgress(message = 'Calculation in progress',
                 detail = 'This may take a while...', value = 0, {
      for (i in 1:15) {
        incProgress(1/15)
        Sys.sleep(0.25)
      }
    })
    plot(cars)
  })
}

shinyApp(ui, server)
}

}
\seealso{
[Progress()]
}
